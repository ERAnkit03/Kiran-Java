A(4) Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and bound strategy.
Java Code: 
public class Knapsack {

    // Function to solve 0-1 Knapsack using Dynamic Programming
    public int knapSack(int W, int[] wt, int[] val, int n) {
        int[] dp = new int[W + 1]; // 1D array to store maximum value for each capacity

        // Iterate over items
        for (int i = 0; i < n; i++) {
            // Traverse capacities from W to wt[i] to ensure each item is considered only once
            for (int w = W; w >= wt[i]; w--) {
                dp[w] = Math.max(dp[w], dp[w - wt[i]] + val[i]);
            }
        }

        return dp[W]; // Maximum value with full capacity
    }

    public static void main(String[] args) {
        Knapsack knapsack = new Knapsack();

        int[] val = {60, 100, 120}; // Values of the items
        int[] wt = {10, 20, 30};   // Weights of the items
        int W = 50;  // Knapsack capacity

        // Get the maximum value
        System.out.println("Maximum value in the Knapsack: " + knapsack.knapSack(W, wt, val, val.length));
    }
}
Explanation:
Types of Questions Asked in Practical Examination:
1. Explain the 0-1 Knapsack Problem and the Dynamic Programming approach used in the program.
•	Answer: The 0-1 Knapsack Problem is a classic optimization problem where we are given a set of items, each with a weight and value, and a knapsack with a limited weight capacity. The goal is to find the maximum value that can be achieved by selecting a subset of items such that their total weight does not exceed the knapsack’s capacity.
•	Dynamic Programming (DP): The DP approach builds a 2D table where dp[i][w] represents the maximum value that can be obtained using the first i items and a knapsack capacity w. The decision is made for each item, either including or excluding it, based on whether it fits in the knapsack.
2. What is the time and space complexity of this solution?
•	Answer:
o	Time Complexity: O(n * W)
	We fill up the dp table of size (n+1) x (W+1), where n is the number of items and W is the knapsack capacity. Each entry in the table takes constant time to compute.
o	Space Complexity: O(n * W)
	The space complexity is due to the storage of the dp table, which is of size (n+1) x (W+1).
3. What is the base case in this problem, and why is it important?
•	Answer: The base case occurs when either no items are considered (i == 0) or the capacity is 0 (w == 0). In both cases, the maximum value is 0 because:
o	If no items are included, the maximum value is 0.
o	If the knapsack has no capacity, no items can be placed in it, so the value is also 0.
The base case initializes the first row and column of the DP table.
4. How does the algorithm make decisions to include or exclude an item?
•	Answer: The algorithm checks if the weight of the current item is less than or equal to the remaining capacity of the knapsack:
o	If yes, it calculates the maximum value by including the item (adding its value to the result of the reduced capacity) and by excluding the item.
o	If no, the item cannot be included, and the value from excluding it is taken.
5. How can this approach be improved?
•	Answer:
o	Optimization: One improvement could be to reduce the space complexity by using a 1D array instead of a 2D table, since each row in the table only depends on the previous row.
o	Branch and Bound: For problems where the solution space is large, the branch and bound technique could be used to reduce the number of subproblems explored.
6. Explain how the 2D DP array is constructed in the program.
•	Answer: The dp array is a 2D table where the number of rows is n + 1 (for each item) and the number of columns is W + 1 (for each possible weight capacity from 0 to W). Initially, all entries are set to 0, representing the base case where no items are included or no capacity is available.
For each item i and each weight w, the table is filled by considering whether the item should be included or excluded, based on its weight and the available capacity.
________________________________________
Time and Space Complexity Explained Step-by-Step:
1.	Time Complexity:
o	We use two nested loops:
	Outer loop runs n + 1 times (for each item).
	Inner loop runs W + 1 times (for each weight capacity from 0 to W).
o	For each combination of item i and weight w, we perform constant time operations (either taking the maximum value or copying the value).
o	Therefore, the total time complexity is O(n * W).
2.	Space Complexity:
o	The space complexity is dominated by the dp array, which has dimensions (n + 1) by (W + 1). Hence, the space complexity is O(n * W).

